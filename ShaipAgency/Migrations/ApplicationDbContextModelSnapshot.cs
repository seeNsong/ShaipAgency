// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShaipAgency.Data;

namespace ShaipAgency.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ShaipAgency.Model.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithdraw")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShaipName")
                        .HasColumnName("ShaipName")
                        .HasColumnType("Nvarchar(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ShaipAgency.Model.Request.ReqDetailsDepositModel", b =>
                {
                    b.Property<string>("RequestNo")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("AccountNumber")
                        .HasColumnName("AccountNumber")
                        .HasColumnType("Nvarchar(40)");

                    b.Property<int>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepositDate")
                        .HasColumnName("DepositDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PersonName")
                        .HasColumnName("PersonName")
                        .HasColumnType("Nvarchar(20)");

                    b.Property<string>("RequestStatusCode")
                        .HasColumnType("char(2)");

                    b.HasKey("RequestNo");

                    b.HasIndex("RequestStatusCode");

                    b.ToTable("TB_REQ_DETAILS_DEPOSIT");
                });

            modelBuilder.Entity("ShaipAgency.Model.Request.ReqMastersModel", b =>
                {
                    b.Property<string>("RequestNo")
                        .HasColumnName("RequestNo")
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnName("CreationDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryGroupNo")
                        .IsRequired()
                        .HasColumnName("DeliveryGroupNo")
                        .HasColumnType("varchar(15)");

                    b.Property<int>("DetailCount")
                        .HasColumnName("DetailCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDateTime")
                        .HasColumnName("ModificationDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("RemainClaims")
                        .HasColumnName("RemainClaims")
                        .HasColumnType("int");

                    b.Property<string>("RequestCode")
                        .HasColumnType("Char(2)");

                    b.Property<string>("RequestTitle")
                        .HasColumnName("RequestTitle")
                        .HasColumnType("Nvarchar(256)");

                    b.Property<int>("RequestUserId")
                        .HasColumnName("RequestUserId")
                        .HasColumnType("int");

                    b.HasKey("RequestNo");

                    b.HasIndex("RequestCode");

                    b.ToTable("TB_REQ_MASTERS");
                });

            modelBuilder.Entity("ShaipAgency.Model.Request.ReqTimestampsModel", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<int>("DetailNo")
                        .HasColumnName("DetailNo")
                        .HasColumnType("int");

                    b.Property<string>("EventCode")
                        .HasColumnName("EventCode")
                        .HasColumnType("char(2)");

                    b.Property<string>("RequestNo")
                        .HasColumnName("RequestNo")
                        .HasColumnType("varchar(15)");

                    b.HasKey("Timestamp");

                    b.ToTable("TB_REQ_TIMESTAMPS");
                });

            modelBuilder.Entity("ShaipAgency.Model.Standards.StdEventCodeModel", b =>
                {
                    b.Property<string>("EventCode")
                        .HasColumnName("EventCode")
                        .HasColumnType("char(2)");

                    b.Property<string>("EventDescription")
                        .HasColumnName("EventDescription")
                        .HasColumnType("Nvarchar(256)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnName("EventName")
                        .HasColumnType("Nvarchar(20)");

                    b.Property<bool>("UseYN")
                        .HasColumnName("UseYN")
                        .HasColumnType("bit");

                    b.HasKey("EventCode");

                    b.ToTable("TB_STD_EVENT_CODE");
                });

            modelBuilder.Entity("ShaipAgency.Model.Standards.StdRequestCodeModel", b =>
                {
                    b.Property<string>("RequestCode")
                        .HasColumnName("RequestCode")
                        .HasColumnType("Char(2)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnName("CreationDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasColumnName("RequestName")
                        .HasColumnType("NvarChar(20)");

                    b.Property<bool>("UseYN")
                        .HasColumnName("UseYN")
                        .HasColumnType("bit");

                    b.HasKey("RequestCode");

                    b.ToTable("TB_STD_REQUEST_CODE");
                });

            modelBuilder.Entity("ShaipAgency.Model.Standards.StdRequestStatusCodeModel", b =>
                {
                    b.Property<string>("RequestStatusCode")
                        .HasColumnName("RequestStatusCode")
                        .HasColumnType("char(2)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnName("CreationDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<int>("RequestAlertPriority")
                        .HasColumnType("int");

                    b.Property<string>("RequestStatusName")
                        .IsRequired()
                        .HasColumnName("RequestStatusName")
                        .HasColumnType("NvarChar(20)");

                    b.Property<bool>("UseYN")
                        .HasColumnName("UseYN")
                        .HasColumnType("bit");

                    b.HasKey("RequestStatusCode");

                    b.ToTable("TB_STD_REQUEST_STATUS_CODE");
                });

            modelBuilder.Entity("ShaipAgency.Model.Standards.StdRequestStatusRouteInfoModel", b =>
                {
                    b.Property<string>("RequestCode")
                        .HasColumnType("Char(2)");

                    b.Property<string>("EventCode")
                        .HasColumnType("char(2)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnName("CreationDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<string>("NextStatusCode")
                        .HasColumnType("char(2)");

                    b.HasKey("RequestCode", "EventCode");

                    b.HasIndex("EventCode");

                    b.HasIndex("NextStatusCode");

                    b.ToTable("TB_STD_REQUEST_STATUS_ROUTE_INFO");
                });

            modelBuilder.Entity("ShaipAgency.Model.User.UserActivityModel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BacktoBackCancellationCount")
                        .HasColumnName("BacktoBackCancellationCount")
                        .HasColumnType("int");

                    b.Property<int>("Blocked")
                        .HasColumnName("Blocked")
                        .HasColumnType("int");

                    b.Property<int>("CancellationCount")
                        .HasColumnName("CancellationCount")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnName("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastSignInDateTime")
                        .HasColumnName("LastSignInDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("RequestCount")
                        .HasColumnName("RequestCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignUpDateTime")
                        .HasColumnName("SignUpDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("WithdrawalDateTime")
                        .HasColumnName("WithdrawalDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("UserId");

                    b.ToTable("TB_USER_ACTIVITY");
                });

            modelBuilder.Entity("ShaipAgency.Model.User.UserPassbookModel", b =>
                {
                    b.Property<string>("RequestNo")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("EventCode")
                        .HasColumnType("char(2)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnName("CreationDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestNo", "EventCode");

                    b.HasIndex("EventCode");

                    b.HasIndex("UserId");

                    b.ToTable("TB_USER_PASSBOOK");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ShaipAgency.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ShaipAgency.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShaipAgency.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ShaipAgency.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShaipAgency.Model.Request.ReqDetailsDepositModel", b =>
                {
                    b.HasOne("ShaipAgency.Model.Request.ReqMastersModel", "ReqMastersModel")
                        .WithMany("ReqDetailsDepositModel")
                        .HasForeignKey("RequestNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShaipAgency.Model.Standards.StdRequestStatusCodeModel", "StdRequestStatusCodeModel")
                        .WithMany("ReqDetailsDepositModel")
                        .HasForeignKey("RequestStatusCode");
                });

            modelBuilder.Entity("ShaipAgency.Model.Request.ReqMastersModel", b =>
                {
                    b.HasOne("ShaipAgency.Model.Standards.StdRequestCodeModel", "StdRequestCodeModel")
                        .WithMany("ReqMastersModel")
                        .HasForeignKey("RequestCode");
                });

            modelBuilder.Entity("ShaipAgency.Model.Standards.StdRequestStatusRouteInfoModel", b =>
                {
                    b.HasOne("ShaipAgency.Model.Standards.StdEventCodeModel", "StdEventCodeModel")
                        .WithMany("StdRequestStatusRouteInfoModel")
                        .HasForeignKey("EventCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShaipAgency.Model.Standards.StdRequestStatusCodeModel", "StdRequestStatusCodeModel")
                        .WithMany("StdRequestStatusRouteInfoModel")
                        .HasForeignKey("NextStatusCode");

                    b.HasOne("ShaipAgency.Model.Standards.StdRequestCodeModel", "StdRequestCodeModel")
                        .WithMany("StdRequestStatusRouteInfoModel")
                        .HasForeignKey("RequestCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShaipAgency.Model.User.UserActivityModel", b =>
                {
                    b.HasOne("ShaipAgency.Model.ApplicationUser", "ApplicationUser")
                        .WithMany("UserActivityModel")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShaipAgency.Model.User.UserPassbookModel", b =>
                {
                    b.HasOne("ShaipAgency.Model.Standards.StdEventCodeModel", "StdEventCodeModel")
                        .WithMany("UserPassbookModel")
                        .HasForeignKey("EventCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShaipAgency.Model.Request.ReqMastersModel", "ReqMastersModel")
                        .WithMany("UserPassbookModel")
                        .HasForeignKey("RequestNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShaipAgency.Model.ApplicationUser", "ApplicationUser")
                        .WithMany("UserPassbookModel")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
